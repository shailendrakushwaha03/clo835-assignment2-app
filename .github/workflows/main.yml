name: Deploy to ECR and Kubernetes
on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  build:
    if: github.event.pull_request.merged == true
    name: Build and Push Images
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push web application image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: webapp-assignment2
        APPLICATION_IMAGE_TAG: latest
      run: |
        cd flaskapp/
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$APPLICATION_IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$APPLICATION_IMAGE_TAG

    - name: Build, tag, and push MySQL image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: mysql-assignment2
        MYSQL_IMAGE_TAG: latest
      run: |
        cd flaskapp/
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$MYSQL_IMAGE_TAG -f Dockerfile_mysql .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$MYSQL_IMAGE_TAG

    - name: Set up SSH key for EC2 instance
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/key.pem
        chmod 600 ~/.ssh/key.pem

    - name: SSH into EC2 and install required services
      run: |
        ssh -t -o StrictHostKeyChecking=no -i ~/.ssh/key.pem ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
        
        # Update and install required tools
        sudo yum update -y
        sudo yum install -y docker git

        # Install Kubernetes tools (kind & kubectl)
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/latest/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind

        curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.21.2/2021-07-05/bin/linux/amd64/kubectl
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/kubectl

        # Start Docker
        sudo systemctl start docker
        sudo systemctl enable docker
        sudo usermod -aG docker ec2-user

        # Create Kubernetes cluster with kind
        kind create cluster --name my-cluster
        EOF

    - name: SSH into EC2 and Deploy to Kubernetes
      run: |
        # Authenticate to AWS ECR
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com

        # Pull Docker images
        docker pull ${{ steps.login-ecr.outputs.registry }}/webapp-assignment2:latest
        docker pull ${{ steps.login-ecr.outputs.registry }}/mysql-assignment2:latest

        # Create Kubernetes manifests directory
        mkdir -p ~/k8s-manifests
        cd ~/k8s-manifests

        # Deploy to Kubernetes
        kubectl apply -f web-app-deployment.yaml
        kubectl apply -f web-app-service.yaml
        kubectl apply -f mysql-deployment.yaml
        kubectl apply -f mysql-service.yaml

        # Verify deployment
        kubectl get pods
        kubectl get services
        
        EOF
